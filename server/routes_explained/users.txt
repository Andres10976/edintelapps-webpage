Function: POST /users
Parameters:
- req.body: The request body containing user data
  - username: The username of the user
  - password: The password of the user.
  - email: The email address of the user
  - name: The first name of the user
  - lastname: The last name of the user
  - roleId: The role ID of the user
  - phone (optional): The phone number of the user
Functionality:
- Creates a new user with the provided data
Returns:
- 201 Created with a success message if the user is created successfully
- 500 Internal Server Error if an error occurs

Function: GET /users
Parameters: None
Functionality:
- Retrieves a list of active users
Returns:
- Array of user objects

Function: GET /users/:id
Parameters:
- id: The ID of the user
Functionality:
- Retrieves a user by their ID
Returns:
- User object containing user details

Function: GET /users/username/:username
Parameters:
- username: The username of the user
Functionality:
- Retrieves a user by their username
Returns:
- User object containing user details

Function: PUT /users/:id
Parameters:
- id: The ID of the user
- req.body: The request body containing updated user data
  - username: The updated username of the user
  - email: The updated email address of the user
  - name: The updated first name of the user
  - lastname: The updated last name of the user
  - roleId: The updated role ID of the user
  - phone: The updated phone number of the user
  - isActive: Indicates whether the user is active
Functionality:
- Updates a user's information
Returns:
- Success message indicating the user update status

Function: DELETE /users/:id
Parameters:
- id: The ID of the user to delete
Functionality:
- Delete a user
Returns:
- Success message indicating the user deletion status

Function: PUT /users/:id/role
Parameters:
- id: The ID of the user
- req.body: The request body containing the updated role data
  - roleId: The updated role ID of the user
Functionality:
- Updates a user's role
Returns:
- Success message indicating the user role update status

Function: POST /users/:id/reset-password
Parameters:
- id: The ID of the user
- req.body: The request body containing the password reset data
  - actualPassword: The current password of the user
  - newPassword: The new password for the user
Functionality:
- Resets a user's password
Returns:
- 201 Created with a success message if the password reset is successful
- 401 Unauthorized if the provided credentials are invalid
- 500 Internal Server Error if an error occurs

Function: GET /users/roles
Parameters: None
Functionality:
- Retrieves a list of active roles
Returns:
- Array of user roles objects